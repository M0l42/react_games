{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","arrayClone","arr","JSON","parse","stringify","Main","gridCopy","state","setState","seed","Math","floor","random","playButton","clearInterval","intervalId","setInterval","play","speed","pauseButton","clearButton","grid","Array","fill","map","generation","g","g2","count","title","window","flask_title","flask_description","role","aria-label","type","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.2cde8e0e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Box extends React.Component {\n    selectBox = () => {\n        this.props.selectBox(this.props.row, this.props.col)\n    }\n\n    render() {\n        return(\n            <div\n                className={this.props.boxClass}\n                id={this.props.id}\n                onClick={this.selectBox}\n            />\n        );\n    }\n\n}\n\nclass Grid extends React.Component {\n    render() {\n        const width = this.props.cols * 14;\n        var rowsArr = [];\n\n        var boxClass = \"\";\n        for (var i = 0; i < this.props.rows; i++){\n            for (var j = 0; j < this.props.cols; j++){\n                let boxId = i + \"_\" + j;\n\n                boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n                rowsArr.push(\n                    <Box\n                        boxClass={boxClass}\n                        key={boxId}\n                        boxId={boxId}\n                        row={i}\n                        col={j}\n                        selectBox={this.props.selectBox}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div className=\"grid\" style={{width: width}}>\n                {rowsArr}\n            </div>\n        );\n    }\n}\n\nclass Main extends React.Component{\n    constructor() {\n        super();\n        this.speed = 100;\n        this.rows = 30;\n        this.cols = 50;\n        this.title = window.flask_title;\n\n        this.state = {\n            generation: 0,\n            gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false) )\n        }\n    }\n\n    selectBox = (row, col) => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        gridCopy[row][col] = !gridCopy[row][col];\n        this.setState({\n            gridFull: gridCopy\n        })\n    };\n\n      seed = () => {\n      let gridCopy = arrayClone(this.state.gridFull);\n      for(let i=0 ; i < this.rows; i++){\n        for(let j=0; j < this.cols; j++){\n          if(Math.floor(Math.random() * 4) === 1){\n             gridCopy[i][j] = true;\n          }\n        }\n      }\n      this.setState({\n        gridFull: gridCopy\n      });\n    };\n\n    playButton = () => {\n      clearInterval(this.intervalId)\n      this.intervalId = setInterval(this.play, this.speed);\n    };\n\n    pauseButton = () => {\n      clearInterval(this.intervalId);\n    };\n\n    clearButton = () => {\n        let grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false) );\n        this.setState({\n           gridFull: grid,\n           generation: 0\n        });\n    };\n\n    play = () => {\n      let g = this.state.gridFull;\n      let g2 = arrayClone(this.state.gridFull)\n\n      for(let i = 0; i<this.rows; i++){\n        for(let j = 0; j<this.cols; j++){\n          let count = 0;\n          if(i>0) if(g[i-1][j]) count++;\n          if(i>0 && j>0) if(g[i-1][j-1]) count++;\n          if(i>0 && j<this.cols-1) if(g[i-1][j+1]) count++;\n          if(j<this.cols-1) if(g[i][j+1]) count++;\n          if(j>0) if(g[i][j-1]) count++;\n          if(i<this.rows-1) if(g[i+1][j]) count++;\n          if(i<this.rows-1 && j>0) if(g[i+1][j-1]) count++;\n          if(i<this.rows-1 && j<this.cols-1) if(g[i+1][j+1]) count++;\n\n          if(g[i][j] && (count<2 || count>3)) g2[i][j] = false;\n          if(!g[i][j] && count === 3) g2[i][j] = true;\n        }\n      }\n\n      this.setState({\n        gridFull: g2,\n        generation: this.state.generation + 1\n      });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.title}</h1>\n                <h2>{window.flask_description}</h2>\n                <div className=\"center\">\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.playButton()}>Play</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.pauseButton()}>Stop</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.seed()}>Seed</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.clearButton()}>Clear</button>\n                    </div>\n                </div>\n                <Grid\n                    gridFull={this.state.gridFull}\n                    rows={this.rows}\n                    cols={this.cols}\n                    selectBox={this.selectBox}\n                />\n                <h2>Generations {this.state.generation}</h2>\n            </div>\n        );\n    }\n}\n\nfunction arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr));\n}\n\n// ReactDOM.render(<Main />, document.getElementById('root'));\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}