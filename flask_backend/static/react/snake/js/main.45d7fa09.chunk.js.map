{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","arrayClone","arr","JSON","parse","stringify","Main","buildList","data","state","list","setState","path","error","result","console","log","direction","length","pop","findPath","snake","apple","algorithm","fetch","method","body","then","response","json","catch","gridCopy","playButton","clearInterval","intervalId","setInterval","play","speed","pauseButton","clearButton","grid","Array","fill","map","generation","Math","floor","random","dijkstraButton","aStarButton","g2","x","y","pos","newHead_y","newHead_x","oldTails","shift","apple_is_safe","window","flask_title","flask_description","role","aria-label","type","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.45d7fa09.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Box extends React.Component {\n    selectBox = () => {\n        this.props.selectBox(this.props.row, this.props.col)\n    }\n\n    render() {\n        return(\n            <div\n                className={this.props.boxClass}\n                id={this.props.id}\n                onClick={this.selectBox}\n            />\n        );\n    }\n\n}\n\nclass Grid extends React.Component {\n    render() {\n        const width = this.props.cols * 14;\n        var rowsArr = [];\n\n        var boxClass = \"\";\n        for (var i = 0; i < this.props.rows; i++){\n            for (var j = 0; j < this.props.cols; j++){\n                let boxId = i + \"_\" + j;\n                if(this.props.gridFull[i][j] == 1){\n                  boxClass = \"box snake\"\n                }\n                else if(this.props.gridFull[i][j] == 2){\n                  boxClass = \"box apple\"\n                }\n                else{\n                  boxClass = \"box off\"\n                }\n                // boxClass = this.props.gridFull[i][j] ? \"box snake\" : \"box off\";\n                rowsArr.push(\n                    <Box\n                        boxClass={boxClass}\n                        key={boxId}\n                        boxId={boxId}\n                        row={i}\n                        col={j}\n                        selectBox={this.props.selectBox}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div className=\"grid\" style={{width: width}}>\n                {rowsArr}\n            </div>\n        );\n    }\n}\n\n\nclass Main extends React.Component{\n    constructor() {\n        super();\n        this.speed = 60;\n        this.rows = 30;\n        this.cols = 30;\n        this.direction = 2;\n        this.algorithm = \"dijkstra\";\n        this.snake = [{\n            \"x\": 15,\n            \"y\": 15,\n          }];\n        this.apple = {\n          \"x\": Math.floor(Math.random() * Math.floor(this.cols)),\n          \"y\": Math.floor(Math.random() * Math.floor(this.rows)),\n        };\n\n        this.state = {\n            list: [],\n            error: null,\n            generation: 0,\n            gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(0) )\n        };\n        this.findPath()\n    }\n\n    buildList =(data)=>{\n        this.state.list = [];\n        this.setState({list: data.path, error: data.result});\n        console.log(this.state.error);\n        if(this.state.error == 'success'){\n            this.direction = this.state.list[this.state.list.length - 1];\n            this.state.list.pop();\n        }\n    };\n\n    findPath =()=> {\n        let data = {\n            'snake': this.snake,\n            'apple': this.apple,\n            'algorithm': this.algorithm,\n        }\n        fetch(\"/update/\", {\n            method: 'POST',\n            body: JSON.stringify(data)\n        }).then(response => response.json())\n            .then(this.buildList)\n            .catch();\n    };\n\n    selectBox = (row, col) => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        gridCopy[row][col] = !gridCopy[row][col];\n        this.setState({\n            gridFull: gridCopy\n        })\n    };\n\n    playButton = () => {\n      clearInterval(this.intervalId)\n      this.intervalId = setInterval(this.play, this.speed);\n    };\n\n    pauseButton = () => {\n      clearInterval(this.intervalId);\n    };\n\n    clearButton = () => {\n        let grid = Array(this.rows).fill().map(() => Array(this.cols).fill(0) );\n        this.setState({\n           gridFull: grid,\n           generation: 0,\n           list: [],\n           error: null,\n        });\n        this.snake = [{\n            \"x\": 15,\n            \"y\": 15,\n          }];\n        this.apple = {\n          \"x\": Math.floor(Math.random() * Math.floor(this.cols)),\n          \"y\": Math.floor(Math.random() * Math.floor(this.rows)),\n        };\n        this.findPath()\n    };\n\n    dijkstraButton = () => {\n      this.algorithm = \"dijkstra\";\n    };\n\n    aStarButton = () => {\n      this.algorithm = \"a_star\";\n    };\n\n    play = () => {\n      if(this.state.error == 'success'){\n          let g = this.state.gridFull;\n          let g2 = arrayClone(this.state.gridFull);\n          g2[this.apple.x][this.apple.y] = 2;\n          let pos = this.snake[this.snake.length - 1];\n          g2[pos.x][pos.y] = 1\n\n          if(this.direction == 3){\n              this.newHead_y = pos.y - 1;\n              this.newHead_x = pos.x;\n          }\n          if(this.direction == 2){\n              this.newHead_y = pos.y + 1;\n              this.newHead_x = pos.x;\n          }\n          if(this.direction == 1){\n              this.newHead_x = pos.x + 1;\n              this.newHead_y = pos.y;\n          }\n          if(this.direction == 0){\n              this.newHead_x = pos.x - 1;\n              this.newHead_y = pos.y;\n          }\n          g2[this.newHead_x][this.newHead_y] = 1;\n          this.snake.push({x:this.newHead_x, y:this.newHead_y})\n\n          if(this.newHead_x != this.apple.x || this.newHead_y != this.apple.y){\n              let oldTails = this.snake[0];\n              g2[oldTails.x][oldTails.y] = 0;\n              this.snake.shift();\n          }\n          else{\n              let apple_is_safe = true;\n              while(apple_is_safe){\n                this.apple.x = Math.floor(Math.random() * Math.floor(this.cols));\n                this.apple.y = Math.floor(Math.random() * Math.floor(this.rows));\n                if( g2[this.apple.x][this.apple.y]==0 ) apple_is_safe = false;\n              }\n              this.findPath();\n          }\n\n          this.direction = this.state.list[this.state.list.length - 1];\n          if(this.state.list.length != 1) this.state.list.pop();\n\n          this.setState({\n            gridFull: g2,\n            generation: this.state.generation + 1\n          });\n      }\n    };\n\n\n\n    render() {\n        return (\n            <div>\n                <h1>{window.flask_title}</h1>\n                <h2>{window.flask_description}</h2>\n                <div className=\"center my-4\">\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.playButton()}>Play</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.pauseButton()}>Stop</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.clearButton()}>Clear</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.dijkstraButton()}>Dijkstra</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.aStarButton()}>A*</button>\n                    </div>\n                </div>\n                <Grid\n                    gridFull={this.state.gridFull}\n                    rows={this.rows}\n                    cols={this.cols}\n                    selectBox={this.selectBox}\n                />\n                <h2 className=\"center my-4\" >Score {this.snake.length}</h2>\n            </div>\n        );\n    }\n}\n\nfunction arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr));\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}